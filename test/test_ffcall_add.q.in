/# vim: set et noai ts=2 sw=2 syntax=cmake:

@TEST_LIB@
/////////////////////////////////////////////////////////////////////////////

if[not system"s";
  '"Start ",string[.z.f]," with -s!" ];

mem:{.mem.sample[]}each til 10
mid:-1
mem_check:{[check] check . mem mid+-1 0 }
hr:40

.test.log hr#"-";
loader:0N!DLL 2:(LOADER;5)
.test.log"After loading q_ffi.dll";

.test.log hr#"-";
tester:0N!loader[TEST_DLL;TEST_FUNC;ABI;RET_TYPE;ARG_TYPES]
mem[mid+:1]:.mem.sample[]
tester:0N!loader[TEST_DLL;TEST_FUNC;ABI;RET_TYPE;ARG_TYPES]
mem[mid+:1]:.mem.sample[]
.test.log"After loading 3rd-party DLL (*2)":
mem_check .mem.verify;

.test.log hr#"-";
TESTS:{x$y%10}[RET_TYPE;](0N;count ARG_TYPES)#(100*count ARG_TYPES)?RET_TYPE$1e300
mem[mid :0]:.mem.sample[]
results:tester ./:TESTS
mem[mid+:1]:.mem.sample[]
.test.log"\n",.Q.s mem_check .mem.delta;

mem[mid+:1]:.mem.sample[]
results:tester ./:TESTS
mem[mid+:1]:.mem.sample[]
.test.log"After running tests (*2)"
mem_check .mem.verify;

.test.log hr#"=";
results:.[tester;]peach TESTS
mem[mid+:1]:.mem.sample[]
.test.log"\n",.Q.s mem_check .mem.delta;
if[RET_TYPE in"ijef";
  expected:RET_TYPE$(+). flip TESTS;
  if[any not ok:results=expected;
    errs:{ "\t",.Q.s1(TESTS;results;expected)@\:x }each where not ok;
    '"incorrect result(s):\n","\n"sv errs ]
 ]

.test.log"All tests completed"
\\